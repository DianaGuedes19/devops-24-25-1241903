pipeline {
  agent any

  environment {
    DOCKER_CREDENTIALS_ID = 'dockerhub-creds-id'
    DOCKER_IMAGE          = 'dianaguedes/springboot-app'
    DOCKER_REGISTRY       = 'https://index.docker.io/v1/'
    REPO_URL              = 'https://github.com/DianaGuedes19/devops-24-25-1241903.git'
  }

  stages {
    stage('Checkout') {
      steps {
        echo 'Checking out...'
        git branch: 'main', url: env.REPO_URL
      }
    }

    stage('Create Dockerfile') {
      steps {
        dir('CA1/part3/react-and-spring-data-rest-basic') {
          echo 'Writing Dockerfile...'
          script {
            writeFile file: 'Dockerfile', text: '''
FROM eclipse-temurin:17-alpine
WORKDIR /app
COPY build/libs/*.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","app.jar"]
'''
          }
        }
      }
    }

    stage('Assemble') {
      steps {
        dir('CA1/part3/react-and-spring-data-rest-basic') {
          echo 'Assembling...'
          sh 'chmod +x gradlew'
          sh './gradlew clean assemble'
        }
      }
    }

    stage('Test') {
      steps {
        dir('CA1/part3/react-and-spring-data-rest-basic') {
          echo 'Testing...'
          sh './gradlew test'
          junit '**/build/test-results/**/*.xml'
        }
      }
    }

    stage('Javadoc') {
      steps {
        dir('CA1/part3/react-and-spring-data-rest-basic') {
          echo 'Generating Javadoc...'
          sh './gradlew javadoc'
          publishHTML([
            reportDir:   'build/docs/javadoc',
            reportFiles: 'index.html',
            reportName:  'Javadoc'
          ])
        }
      }
    }

    stage('Archive') {
      steps {
        dir('CA1/part3/react-and-spring-data-rest-basic') {
          echo 'Archiving...'
          archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('CA1/part3/react-and-spring-data-rest-basic') {
          echo 'Building & Pushing Docker image...'
          script {
            def app = docker.build("${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}", '.')
            docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIALS_ID) {
              app.push()
            }
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
